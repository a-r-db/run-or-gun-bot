@page "/"
@using RunOrGunGameBot.Bot.DataClasses
@using RunOrGunGameBot.Bot.DataServices
@using ToyStackTraceFormatter

<TextEdit Role="TextRole.Password" @bind-Text="@BotSettings.Token" Placeholder="Bot Token" />
<br />
<Switch TValue="bool" Checked="@BotSettings.Enabled" CheckedChanged="@OnStateChanged">Enable Bot</Switch>
<br />
<Button Clicked="@(args => Save())">Save Logs</Button>
<br />
<DataGrid ShowPager="true" RowDoubleClicked="@(args => OnErrorRowClicked(args))" @bind-SelectedRow="@botLogError" PageSize="5" Data="@BotSettings.BotLogErrorList" TItem="BotLogError">
    <DataGridColumns>
        <DataGridDateColumn TItem="BotLogError" Field="@nameof(BotLogError.DateTime)" DisplayFormat="{0:MM/dd/yyyy hh:mm:ss tt}" Caption="Date" />
        <DataGridColumn TItem="BotLogError" Field="@nameof(BotLogError.Message)" Caption="Message" />
        <DataGridColumn TItem="BotLogError" Field="@nameof(BotLogError.StackTrace)" Caption="BasicTrace" />
    </DataGridColumns>
</DataGrid>
<br />
<DataGrid ShowPager="true" PageSize="5" Data="@BotSettings.BotLogList" TItem="BotLog">
    <DataGridColumns>
        <DataGridColumn TItem="BotLog" Field="@nameof(BotLog.Tag)" Caption="Tag" />
        <DataGridDateColumn TItem="BotLog" Field="@nameof(BotLog.DateTime)" DisplayFormat="{0:MM/dd/yyyy hh:mm:ss tt}" Caption="Date" />
        <DataGridColumn TItem="BotLog" Field="@nameof(BotLog.Message)" Caption="Message" />
    </DataGridColumns>
</DataGrid>
<Modal @ref="modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@logErrorDate</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @logErrorException
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    // https://blazorise.com/docs/components/text/#with-bind-attribute
    // https://blazorise.com/docs/components/switch/
    private string Tag = "Index.razor";
    private BotService BotService = new BotService();

    // reference to the modal component
    private Modal modalRef;
    private BotLogError botLogError;
    private string logErrorDate;
    private string logErrorException;

    private void OnStateChanged(bool switchState)
    {
        BotSettings.Enabled = switchState;
    }

    private void Save()
    {
        BotSettings.SaveLogs<List<BotLogError>>(BotSettings.BotLogErrorList, "bot_error_log_");
    }

    public void OnErrorRowClicked(DataGridRowMouseEventArgs<BotLogError> e)
    {
        try
        {
            BuildDate();
            BuildHTML();
            ShowModal();
            BotSettings.BotLogList.Add(new BotLog(Tag, "Row Clicked"));
        }
        catch (Exception exception)
        {
            BotSettings.BotLogErrorList.Add(new BotLogError(exception));
        }
    }

    private void BuildDate()
    {
        DateTime dateTime;
        dateTime = botLogError.DateTime;
        logErrorDate = (dateTime == default(DateTime)) ? "" : dateTime.ToString();
    }

    private void BuildHTML()
    {
        Exception exception = botLogError.Exception;
        if (exception == null)
        {
            logErrorException = "";
        }
        else
        {
            string fullTraceHTML = exception.StackTrace;
            while (exception.InnerException != null)
            {
                exception = exception.InnerException;
                fullTraceHTML += TraceToHTML(exception.StackTrace);
            }
            logErrorException = fullTraceHTML;
        }
    }


    private string TraceToHTML(string input)
    {
        return "<pre><code>"
            + StackTraceFormatter.FormatHtml(
            input,
            new StackTraceHtmlFragments
            {
                BeforeType = "<strong>",    // highlight type
                AfterMethod = "</strong>",   // ...and method
                BeforeParameterName = "<em>",        // emphasise parameter names
                AfterParameterName = "</em>",
            })
            + "</code></pre>";
    }

    private void ShowModal()
    {
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }
}